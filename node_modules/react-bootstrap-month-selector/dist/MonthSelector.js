"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactBootstrap = require("react-bootstrap");

var _moment = require("moment");

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = {
  yearNav: {
    display: "flex",
    alignItems: "center",
    margin: "0 1px 5px"
  },

  yearButton: {
    flex: "1",
    textAlign: "center",
    margin: "0 2px"
  },

  yearButtonText: {
    verticalAlign: "middle",
    fontWeight: "bold"
  },

  monthContainer: {
    display: "inline-block",
    padding: "1px",
    width: "25%",
    boxSizing: "border-box"
  },

  monthButton: {
    lineHeight: "3em",
    textAlign: "center",
    width: "100%"
  }
};

var MonthSelector = function (_React$Component) {
  _inherits(MonthSelector, _React$Component);

  function MonthSelector(props) {
    _classCallCheck(this, MonthSelector);

    var _this = _possibleConstructorReturn(this, (MonthSelector.__proto__ || Object.getPrototypeOf(MonthSelector)).call(this));

    _this.onNextYear = _this.onNextYear.bind(_this);
    _this.onPrevYear = _this.onPrevYear.bind(_this);
    _this.onResetYear = _this.onResetYear.bind(_this);

    _this.state = {
      year: props.year
    };
    return _this;
  }

  _createClass(MonthSelector, [{
    key: "onPrevYear",
    value: function onPrevYear() {
      this.setState({ year: this.state.year - 1 });
    }
  }, {
    key: "onNextYear",
    value: function onNextYear() {
      this.setState({ year: this.state.year + 1 });
    }
  }, {
    key: "onSelect",
    value: function onSelect(month) {
      this.props.onSelect({
        month: month,
        year: this.state.year
      });
    }
  }, {
    key: "onResetYear",
    value: function onResetYear() {
      this.setState({ year: this.props.year });
    }
  }, {
    key: "renderMonth",
    value: function renderMonth(month) {
      var _this2 = this;

      var selected = this.props.month === month && this.props.year === this.state.year;

      return _react2.default.createElement(
        "div",
        { style: styles.monthContainer, key: month },
        _react2.default.createElement(
          _reactBootstrap.Button,
          {
            bsStyle: selected ? "complete" : "transparent",
            style: styles.monthButton,
            onClick: function onClick() {
              return _this2.onSelect(month);
            }
          },
          (0, _moment2.default)().month(month - 1).format("MMM")
        )
      );
    }
  }, {
    key: "render",
    value: function render() {
      var months = [];
      for (var i = 1; i <= 12; i++) {
        months.push(this.renderMonth(i));
      }

      return _react2.default.createElement(
        "div",
        { style: styles.root },
        _react2.default.createElement(
          "div",
          { style: styles.yearNav },
          _react2.default.createElement(
            _reactBootstrap.Button,
            { bsSize: "small", onClick: this.onPrevYear },
            _react2.default.createElement(_reactBootstrap.Glyphicon, { glyph: "chevron-left" })
          ),
          _react2.default.createElement(
            _reactBootstrap.Button,
            {
              bsSize: "small",
              bsStyle: "transparent",
              onClick: this.onResetYear,
              style: styles.yearButton
            },
            _react2.default.createElement(
              "span",
              { style: styles.yearButtonText, className: "block-header" },
              this.state.year
            )
          ),
          _react2.default.createElement(
            _reactBootstrap.Button,
            { bsSize: "small", onClick: this.onNextYear },
            _react2.default.createElement(_reactBootstrap.Glyphicon, { glyph: "chevron-right" })
          )
        ),
        _react2.default.createElement(
          "div",
          { style: styles.months },
          months
        )
      );
    }
  }]);

  return MonthSelector;
}(_react2.default.Component);

MonthSelector.propTypes = {
  onSelect: _react.PropTypes.func.isRequired,
  month: _react.PropTypes.number.isRequired,
  year: _react.PropTypes.number.isRequired
};
exports.default = MonthSelector;